/*@author Linto (linto.k.a@teamaol.com)*/package com.linto.utils{    import com.linto.events.CustEvent;        import flash.display.Loader;    import flash.display.MovieClip;    import flash.display.Sprite;    import flash.events.*;    import flash.net.URLRequest;    public class AssetLoader extends Sprite {				public static var LOAD_COMPLETE:String = "onAssetLoadComplete";		private var loader:Loader;				private var dataXml:XML;		private var xmlLoader:XMLLoader;		private var targetMc:MovieClip;        public function AssetLoader() {        }				public function loadAsset(targetMc:MovieClip, assetUrl:String):void{						this.targetMc = targetMc;			this.loader = new Loader();			this.loader.name = "assetLoader";            configureListeners(loader.contentLoaderInfo);			            var request:URLRequest = new URLRequest(assetUrl);            loader.load(request);            targetMc.addChild(loader);		}		public function unloadAsset():void{			if(this.loader != null){				this.targetMc.removeChild(this.loader);				this.loader = null;			}		}        private function configureListeners(dispatcher:IEventDispatcher):void {            dispatcher.addEventListener(Event.COMPLETE, completeHandler);            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);            dispatcher.addEventListener(Event.INIT, initHandler);            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);            dispatcher.addEventListener(Event.OPEN, openHandler);            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);            dispatcher.addEventListener(Event.UNLOAD, unLoadHandler);        }        private function completeHandler(event:Event):void {            //trace("completeHandler: " + event);						var custEvt:CustEvent = new CustEvent(AssetLoader.LOAD_COMPLETE);			var data:Object = new Object();			data.target = event.target;			data.currentTarget = event.currentTarget;			data.loaderObj = this.loader;			custEvt.data = data;			dispatchEvent(custEvt);        }        private function httpStatusHandler(event:HTTPStatusEvent):void {            //trace("httpStatusHandler: " + event);        }        private function initHandler(event:Event):void {            //trace("initHandler: " + event);        }        private function ioErrorHandler(event:IOErrorEvent):void {            //trace("ioErrorHandler: " + event);        }        private function openHandler(event:Event):void {            //trace("openHandler: " + event);        }        private function progressHandler(event:ProgressEvent):void {            //trace("progressHandler: bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);        }        private function unLoadHandler(event:Event):void {            //trace("unLoadHandler: " + event);        }    }}