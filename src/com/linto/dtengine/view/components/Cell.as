package com.linto.dtengine.view.components {		import com.gs.TweenLite;	import com.linto.events.CustEvent;	import com.linto.utils.*;		import flash.display.*;	import flash.events.*;	import flash.utils.Timer;		public class Cell extends MovieClip {				private var FADE_TIME:Number = 1; // 1 sec		private var MOVE_TIME:Number = 1; // 1 sec		private var assetLoader:AssetLoader;		public var cellPreloader:MovieClip;		public var cellOutlineMc:MovieClip;		public var cellBgMc:MovieClip;		public var imgHolder:MovieClip;		public var imgMask:MovieClip;		private var CELL_WIDTH:Number = 100; 				private var utils:UtilityMethods;				public function Cell() {						this.utils = new UtilityMethods();							this.cellPreloader = cellPreloader;			this.imgHolder = imgHolder;			this.cellOutlineMc = cellOutlineMc;			this.cellBgMc = cellBgMc;						if(this.assetLoader == null){				this.assetLoader = new AssetLoader();			}		}				public function setCellSize(width:Number, height:Number):void{			/*			CELL_WIDTH = width;			this.cellOutlineMc.x = 0;			this.cellOutlineMc.y = 0;			this.cellBgMc.x = 1;			this.cellBgMc.y = 1;			this.imgMask.x = 1;			this.imgMask.y = 1;			this.cellPreloader.x = width/2 - 5;			this.cellPreloader.y = height/2 - 5;						this.cellOutlineMc.width = width;			this.cellOutlineMc.height = height;			this.cellBgMc.width = width - 2;			this.cellBgMc.height = height - 2;			this.imgMask.width = width - 2;			this.imgMask.height = height - 2;			*/		}				private function showPreloader(isVisible:Boolean):void{			this.cellPreloader.visible = isVisible;			switch(isVisible){				case true:					this.cellPreloader.gotoAndPlay(2);					break;				case false:					this.cellPreloader.gotoAndStop(1);					break;			}		}				public function loadThumbnail(url:String):void{			this.showPreloader(true);			this.assetLoader.addEventListener(AssetLoader.LOAD_COMPLETE, onLoadComplete);			this.assetLoader.loadAsset(imgHolder, url);		}		public function unloadThumbnail():void{			this.assetLoader.unloadAsset();		}				protected function onLoadComplete(evt:CustEvent):void{			this.showPreloader(false);						/*			var contentMc:MovieClip = evt.data.loaderObj  as MovieClip;			trace("evt.data.target = "+evt.data.target);			trace("evt.data.currentTarget = "+evt.data.currentTarget);			trace("evt.data.loaderObj = "+evt.data.loaderObj);			trace("contentMc = "+contentMc);			*/			//this.animateContent(contentMc);						//this.utils.applyBWFilter(this, true);			//this.utils.grayscale(this);						this.addEventListener(MouseEvent.MOUSE_OVER, onMouseOver);			this.addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);		}		private function onMouseOver(evt:MouseEvent):void{			//this.utils.applyBWFilter(this, false);			//this.utils.unGrayscale(this);		}		private function onMouseOut(evt:MouseEvent):void{			//this.utils.applyBWFilter(this, true);			//this.utils.grayscale(this);		}		private function animateContent(targetMc:Loader):void{			/*			trace("xPos = "+targetMc.x);			trace("yPos = "+targetMc.y);			*/		}				private function applyFade(targetMc:MovieClip, type:String):void{			switch(type){				case "IN":					TweenLite.to(targetMc, FADE_TIME, {alpha:1});					break;				case "OUT":					TweenLite.to(targetMc, FADE_TIME, {alpha:0});					break;			}		}				private function fadeThisBox(boxIndex:int):void{			var thisBox:MovieClip;			thisBox = this.getChildByName("box"+boxIndex) as MovieClip;			this.applyFade(thisBox, "IN");		}			}	}