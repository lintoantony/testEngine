package com.linto.preloader {	    import flash.display.*;    import flash.events.*;    import flash.net.URLRequest;    import flash.system.ApplicationDomain;    import flash.system.LoaderContext;    import flash.system.SecurityDomain;    import flash.text.*;    public class ContentLoader extends MovieClip {    	private var loader:Loader;		private var stageRef:AppWrapper;		private var flashVars:Object;    	        public function ContentLoader(flashVars:Object, stageRef:AppWrapper) {						this.stageRef = stageRef;			this.flashVars = flashVars;						this.showLoadingMessage(true);			        	// FOR ONLINE LOADING        	/*        	var swfUrl:String = flashVars['contentSwfUrl']!=null ? flashVars['contentSwfUrl'] : 'DrivingTestEngine.swf';        	loader = new Loader(); 				var req:URLRequest = new URLRequest(swfUrl);			var ldrContext:LoaderContext = new LoaderContext(false, ApplicationDomain.currentDomain);			ldrContext.securityDomain = SecurityDomain.currentDomain;			        	loader.contentLoaderInfo.addEventListener( Event.INIT, startApp );            loader.contentLoaderInfo.addEventListener( ProgressEvent.PROGRESS, onLoaderProgress );			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, completeHandler);            loader.load(req, ldrContext);            */                        // FOR LOCAL LOADING .... Need to comment when publishing for online        	        	var swfUrl:String = flashVars['contentSwfUrl']!=null ? flashVars['contentSwfUrl'] : 'DrivingTestEngine.swf';        	loader = new Loader(); 				var req:URLRequest = new URLRequest(swfUrl);			        	loader.contentLoaderInfo.addEventListener( Event.INIT, startApp );            loader.contentLoaderInfo.addEventListener( ProgressEvent.PROGRESS, onLoaderProgress );			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, completeHandler);            			loader.load(req);			this.stageRef.addChild(this);        }        private function showLoadingMessage(isVisible:Boolean):void{			var thisFmt:TextFormat = new TextFormat();			thisFmt.color = 0xffffff;			thisFmt.font = "Verdana";			thisFmt.size = 15;			var loadMsg:TextField;			if(isVisible){				loadMsg = new TextField();				loadMsg.name = "loadingMsg"				loadMsg.text = "Loading content. Please wait...";				loadMsg.autoSize = TextFieldAutoSize.LEFT;				loadMsg.border = false;				loadMsg.background = false;				loadMsg.selectable = false;				loadMsg.setTextFormat(thisFmt);				addChild(loadMsg);			}else{				loadMsg = this.getChildByName("loadingMsg") as TextField;				this.removeChild(loadMsg);			}					}		        private function onLoaderProgress(event:ProgressEvent=null) : void {        	this.setPercent( event.bytesLoaded / event.bytesTotal );        }		private function setPercent(percentage:Number):void{					}		private function completeHandler(event:Event):void{                    }        private function startApp( e:Event ) : void {			//loader.content.visible = false;			addChild( loader.content );						var values:Object = new Object();			values.stageRef = this.stageRef;									var appConfigXml:String = flashVars['appConfigXml']!=null ? flashVars['appConfigXml'] : 'dtEngineConfig.xml';			values.appConfigXml = appConfigXml;									// SETTING THE FLASHVARS ON THE LOADED SWF			e.target.content.setGlobalVars(values);			this.removeAssets();						loader.content.visible = true;		}				public function removeAssets():void{			this.showLoadingMessage(false);		}    }}